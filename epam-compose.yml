version: '3.3'
services:
  tile_server:
    image: git.bbnavi.vk256.eu/bbnavi/datahub:tileserver
    command: "-c /config/config.yml"
    # configs:
    #   - source: martin-config-yml-2022-05-19
    #     target: /martin_config.yml
    networks:
      - bbnavi-datahub-postgresql
      - public
    deploy:
      labels: 
        traefik.docker.network: public
        traefik.enable: 'true'
        traefik.http.routers.bbnavi-tileserver.entrypoints: websecure
        traefik.http.routers.bbnavi-tileserver.rule: Host(`tileserver.bbnavi.vk256.eu`)
        traefik.http.routers.bbnavi-tileserver.tls.certresolver: acme
        traefik.http.services.tileserver.loadbalancer.server.port: '5000'
      placement:
        constraints:
        - node.role == worker
      restart_policy:
        condition: on-failure
  nginx:
    image: nginx
    networks: [default, public]
    configs:
      - source: datahub-nginx-conf
        target: /etc/nginx/conf.d/default.conf
    volumes:
      - unicorn:/unicorn
      - assets:/public
    deploy:
      labels:
        traefik.docker.network: public
        traefik.enable: 'true'
        traefik.http.routers.bbnavi-datahub.entrypoints: websecure
        traefik.http.routers.bbnavi-datahub.rule: Host(`datahub.bbnavi.vk256.eu`)
        traefik.http.routers.bbnavi-datahub.tls.certresolver: acme
        traefik.http.services.datahub.loadbalancer.server.port: '80'
      restart_policy:
        condition: on-failure
      placement:
        constraints:
        - node.role == worker
  app:
    image: git.bbnavi.vk256.eu/bbnavi/datahub:latest
    environment:
      RAILS_ENV: production
      RAILS_LOG_TO_STDOUT: '1'
      SVA_COMMUNITY: bbnavi
    volumes:
     - unicorn:/unicorn
     - assets:/assets
    networks:
     - bbnavi-datahub-postgresql
     - bbnavi-redis-server
    configs:
     -
      source: bbnavi-datahub-credentials
      target: /app/releases/bbnavi/credentials.yml
     -
      source: mainserver-common-master-key
      target: /app/config/master.key
    logging:
      driver: awslogs
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
         - node.role == worker
  cron_job:
    image: git.bbnavi.vk256.eu/bbnavi/datahub:latest
    command:
     - bin/start-cron.sh
    environment:
      RAILS_ENV: production
      RAILS_LOG_TO_STDOUT: '1'
      SVA_COMMUNITY: bbnavi
    volumes:
     - unicorn:/unicorn
     - assets:/assets
    networks:
     - bbnavi-datahub-postgresql
     - bbnavi-redis-server
    configs:
     -
      source: bbnavi-datahub-credentials
      target: /app/releases/bbnavi/credentials.yml
     -
      source: mainserver-common-master-key
      target: /app/config/master.key
    logging:
      driver: awslogs
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
         - node.role == worker
  db:
    image: postgis/postgis:15-3.3
    environment:
      DATADIR: /var/lib/postgresql/data
      POSTGRES_DB: bbnavihub
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_PASSWORD: bbnavihub
      POSTGRES_PASSWORT: bbnavihub
      POSTGRES_USER: bbnavihub
    volumes:
     - datahub_postgres_15_production_db:/var/lib/postgresql/data
    networks:
      bbnavi-datahub-postgresql: 
        aliases: 
          - bbnavi-datahub-postgresql
    logging:
      driver: awslogs
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
         - node.role == worker
  delayed_job:
    image: git.bbnavi.vk256.eu/bbnavi/datahub:latest
    command:
     - bin/delayed_job
     - run
    environment:
      RAILS_ENV: production
      RAILS_LOG_TO_STDOUT: '1'
      SVA_COMMUNITY: bbnavi
    volumes:
     - unicorn:/unicorn
     - assets:/assets
    networks:
     - bbnavi-datahub-postgresql
     - bbnavi-redis-server
    configs:
     -
      source: bbnavi-datahub-credentials
      target: /app/releases/bbnavi/credentials.yml
     -
      source: mainserver-common-master-key
      target: /app/config/master.key
    logging:
      driver: awslogs
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
         - node.role == worker
  redis:
    image: bitnami/redis:6.0-debian-10
    environment:
      ALLOW_EMPTY_PASSWORD: 'yes'
      REDIS_DISABLE_COMMANDS: FLUSHDB,FLUSHALL
    volumes:
     - redis_data:/bitnami/redis/data
    networks:
     - bbnavi-redis-server
    logging:
      driver: awslogs
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints:
         - node.role == worker
networks:
  bbnavi-datahub-postgresql:
    driver: overlay
  bbnavi-redis-server:
    driver: overlay
  public: 
    external: true
volumes:
  assets:
    external: true
  datahub_postgres_15_production_db:
    external: true
  redis_data:
    external: true
  unicorn:
    external: true
configs:
  bbnavi-datahub-credentials:
    external: true
  mainserver-common-master-key:
    external: true
  datahub-nginx-conf:
    external: true
